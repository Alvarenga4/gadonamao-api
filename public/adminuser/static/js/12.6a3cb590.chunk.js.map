{"version":3,"sources":["app/services/api_localidade.js","app/pages/AnuncioDetails/index.js"],"names":["apiLocalidade","axios","create","baseURL","AnuncioDetails","navigate","useNavigate","notificationRef","useRef","setLoading","useContext","AppContext","useManager","store","update","useState","descricao","setDescricao","titulo","setTitulo","estados","setEstados","estado","setEstado","loadingEstados","setLoadingEstados","cidades","setCidades","cidade","setCidade","loadingCidades","setLoadingCidades","preco","setPreco","quantidade","setQuantidade","unidades","setUnidades","unidade","setUnidade","validationErrors","setValidationErrors","showButton","setShowButton","useEffect","a","api","get","data","sort","b","name","console","log","JSON","parse","localStorage","getItem","ANUNCIO_DATA","handleOnChangeState","useCallback","stateValue","value","map","c","nome","label","region","microrregiao","mesorregiao","populateStates","length","s","id","sigla","handleOnChangeCity","cityValue","selectStyles","control","styles","backgroundColor","borderRadius","padding","fontSize","option","cursor","color","menu","selectStylesState","borderColor","selectStylesCity","Notification","ref","Container","Row","Col","Card","CardHeader","CardBody","FormGroup","Input","type","placeholder","invalid","onChange","target","FormFeedback","className","classNamePrefix","noOptionsMessage","loadingMessage","isLoading","isClearable","isSearchable","options","onFocus","md","CustomInput","_id","CardFooter","Button","onClick","event","preventDefault","dataStorage","categorias","selectedCategorias","scs","categoria","schema","Yup","shape","required","validate","abortEarly","anuncioId","dataSuccess","setItem","stringify","animal","anuncio","animalId","current","notify","message","ve","inner","forEach","e","path","response"],"mappings":"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","file":"static/js/12.6a3cb590.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst apiLocalidade = axios.create({\n  baseURL: 'https://servicodados.ibge.gov.br/api/v1/localidades',\n});\n\nexport default apiLocalidade;\n","import React, { useEffect, useState, useCallback, useContext, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Select from 'react-select';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Container,\n  CardFooter,\n  Row,\n  FormGroup,\n  Input,\n  FormFeedback,\n  CustomInput,\n} from 'reactstrap';\n\nimport * as Yup from 'yup';\n\nimport Notification from '../../components/Notification';\nimport { ANUNCIO_DATA } from '../../constants/app';\nimport { AppContext } from '../../contexts/app';\nimport { useManager } from '../../hooks/manager';\nimport api from '../../services/api';\nimport apiLocalidade from '../../services/api_localidade';\n\nfunction AnuncioDetails() {\n  const navigate = useNavigate();\n  const notificationRef = useRef();\n  const { setLoading } = useContext(AppContext);\n  const { store, update } = useManager();\n  const [descricao, setDescricao] = useState('');\n  const [titulo, setTitulo] = useState('');\n  const [estados, setEstados] = useState([]);\n  const [estado, setEstado] = useState({});\n  const [loadingEstados, setLoadingEstados] = useState(false);\n  const [cidades, setCidades] = useState([]);\n  const [cidade, setCidade] = useState('');\n  const [loadingCidades, setLoadingCidades] = useState(false);\n  const [preco, setPreco] = useState('');\n  const [quantidade, setQuantidade] = useState('');\n  const [unidades, setUnidades] = useState([]);\n  const [unidade, setUnidade] = useState('');\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setShowButton(true);\n        const { data } = await api.get('/unidades');\n        data.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setUnidades(data);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, []);\n\n  const handlePrev = () => {\n    navigate('admin-usuario/anuncio');\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    (async () => {\n      try {\n        let dataStorage = JSON.parse(localStorage.getItem(ANUNCIO_DATA));\n        dataStorage = {\n          ...dataStorage,\n          titulo,\n          descricao,\n          estado,\n          cidade,\n          preco,\n          quantidade,\n          unidade,\n        };\n\n        const data = {\n          ...dataStorage,\n          estado: estado?.sigla,\n          cidade: cidade?.value,\n          categorias: dataStorage.selectedCategorias.map((scs) => scs.categoria._id),\n          selectedCategorias: null,\n        };\n\n        const schema = Yup.object().shape({\n          titulo: Yup.string().required('Informe um título para o anúncio'),\n          descricao: Yup.string().required('Informe uma descrição'),\n          estado: Yup.string().required('Selecione um estado'),\n          cidade: Yup.string().required('Selecione uma cidade'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        console.log(dataStorage);\n\n        if (dataStorage.anuncioId) {\n          update(dataStorage.anuncioId, '/anuncios', data, (dataSuccess) => {\n            localStorage.setItem(ANUNCIO_DATA, JSON.stringify(dataStorage));\n            navigate(\n              `admin-usuario/anuncio-video-fotos/${dataSuccess.animal._id}`,\n            );\n          });\n          return;\n        }\n\n        store('/anuncios', data, (dataSuccess) => {\n          dataStorage = {\n            ...dataStorage,\n            anuncioId: dataSuccess.anuncio._id,\n            animalId: dataSuccess.animal._id,\n          };\n\n          console.log(dataStorage);\n          localStorage.setItem(ANUNCIO_DATA, JSON.stringify(dataStorage));\n          navigate(\n            `admin-usuario/anuncio-video-fotos/${dataSuccess.animal._id}`,\n          );\n        });\n      } catch (err) {\n        setLoading(false);\n        console.log(err);\n        setValidationErrors({});\n        // Validation failed\n        if (err instanceof Yup.ValidationError) {\n          notificationRef.current.notify({\n            message:\n              'Por favor, preencha todos os dados necessários para criar o anúncio',\n            color: 'warning',\n          });\n          const ve = {};\n          err.inner.forEach((e) => {\n            ve[e.path] = e.message;\n          });\n          setValidationErrors(ve);\n          return;\n        }\n\n        if (err && err.response && err.response.data) {\n          const { message } = err.response.data;\n          notificationRef.current.notify({\n            message,\n            color: 'danger',\n          });\n\n          return;\n        }\n\n        notificationRef.current.notify({\n          message: 'Falha ao realizar o cadastro do anúncio',\n          color: 'danger',\n        });\n      }\n    })();\n  };\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(ANUNCIO_DATA));\n    if (data) {\n      console.log(data);\n      setTitulo(data.titulo ? data.titulo : '');\n      setDescricao(data.descricao ? data.descricao : '');\n      setEstado(data.estado ? data.estado : '');\n      setCidade(data.cidade ? data.cidade : '');\n      setPreco(data.preco ? data.preco : '');\n      setUnidade(data.unidade ? data.unidade : '');\n      setQuantidade(data.quantidade ? data.quantidade : '');\n    }\n  }, []);\n\n  const handleOnChangeState = useCallback((stateValue) => {\n    setCidade(null);\n    setEstado('');\n\n    if (!stateValue?.value) {\n      setCidades([]);\n      return;\n    }\n\n    setEstado(stateValue);\n\n    (async () => {\n      try {\n        setLoading(true);\n        setLoadingCidades(true);\n        const { data = [] } = await apiLocalidade.get(\n          `estados/${stateValue.value}/municipios`,\n        );\n        setCidades(\n          data.map((c) => ({\n            value: c?.nome,\n            label: c?.nome,\n            region: c?.microrregiao?.mesorregiao?.nome,\n          })),\n        );\n        setLoading(false);\n        setLoadingCidades(false);\n      } catch (error) {\n        setLoading(false);\n        setLoadingCidades(false);\n        console.log(error);\n      }\n    })();\n  }, []);\n\n  const populateStates = useCallback(() => {\n    if (!estados.length) {\n      (async () => {\n        try {\n          setLoading(true);\n          setLoadingEstados(true);\n          const { data = [] } = await apiLocalidade.get('estados?orderBy=nome');\n          setEstados(\n            data.map((s) => ({\n              value: s?.id,\n              label: s?.nome,\n              sigla: s?.sigla,\n            })),\n          );\n          setLoading(false);\n          setLoadingEstados(false);\n        } catch (error) {\n          setLoading(false);\n          setLoadingEstados(false);\n          console.log(error);\n        }\n      })();\n    }\n  }, []);\n\n  const handleOnChangeCity = useCallback((cityValue) => {\n    if (!cityValue) {\n      setCidade(null);\n      return;\n    }\n\n    setCidade(cityValue);\n  }, []);\n\n  const selectStyles = {\n    control: (styles) => ({\n      ...styles,\n      backgroundColor: '#fff',\n      borderRadius: '0.75rem',\n      padding: '0.3rem',\n      fontSize: '1.05rem',\n    }),\n    option: (styles) => ({\n      ...styles,\n      cursor: 'default',\n\n      ':active': {\n        ...styles[':active'],\n        color: '#fff',\n        backgroundColor: '#846446',\n      },\n\n      ':hover': {\n        ...styles[':hover'],\n        color: '#fff',\n        backgroundColor: '#846446',\n      },\n    }),\n    menu: (styles) => ({\n      ...styles,\n    }),\n  };\n\n  const selectStylesState = {\n    ...selectStyles,\n    control: (styles) => ({\n      ...selectStyles.control(styles),\n      borderColor: validationErrors.estado ? '#dc3545' : '#ced4da',\n    }),\n  };\n\n  const selectStylesCity = {\n    ...selectStyles,\n    control: (styles) => ({\n      ...selectStyles.control(styles),\n      borderColor: validationErrors.cidade ? '#dc3545' : '#ced4da',\n    }),\n  };\n\n  return (\n    <>\n      <Notification ref={notificationRef} />\n      <Container>\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader>\n                <h3>Detalhes do Anúncio</h3>\n              </CardHeader>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Card>\n              <CardBody>\n                <FormGroup>\n                  {/* <Label for=\"titulo\">Título</Label> */}\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Título\"\n                    value={titulo}\n                    invalid={!!validationErrors.titulo}\n                    onChange={({ target: { value } }) => setTitulo(value)}\n                  />\n                  <FormFeedback>{validationErrors.titulo}</FormFeedback>\n                </FormGroup>\n                <FormGroup>\n                  {/* <Label for=\"descricao\">Faça uma descrição</Label> */}\n                  <Input\n                    type=\"textarea\"\n                    placeholder=\"Descrição\"\n                    value={descricao}\n                    invalid={!!validationErrors.descricao}\n                    onChange={({ target: { value } }) => setDescricao(value)}\n                  />\n                  <FormFeedback>{validationErrors.descricao}</FormFeedback>\n                </FormGroup>\n                <Select\n                  className=\"basic-single mb-3\"\n                  classNamePrefix=\"select\"\n                  placeholder=\"Estado\"\n                  noOptionsMessage={() => 'Nenhuma estado encontrado'}\n                  loadingMessage={() => 'Carregando estados'}\n                  isLoading={loadingEstados}\n                  isClearable\n                  isSearchable\n                  value={estado}\n                  options={estados}\n                  styles={selectStylesState}\n                  onFocus={populateStates}\n                  onChange={handleOnChangeState}\n                />\n                <Select\n                  className=\"basic-single mb-3\"\n                  classNamePrefix=\"select\"\n                  placeholder=\"Cidade\"\n                  noOptionsMessage={() => (!estado ? 'Selecione um estado' : 'Nenhuma cidade encontrada')}\n                  loadingMessage={() => 'Carregando cidades'}\n                  isLoading={loadingCidades}\n                  isClearable\n                  isSearchable\n                  value={cidade}\n                  styles={selectStylesCity}\n                  options={cidades}\n                  onChange={handleOnChangeCity}\n                />\n                <Row>\n                  <Col md={4}>\n                    <FormGroup>\n                      {/* <Label for=\"preco\">Preço</Label> */}\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Preço\"\n                        value={preco}\n                        invalid={!!validationErrors.preco}\n                        onChange={({ target: { value } }) => setPreco(value)}\n                      />\n                      <FormFeedback>{validationErrors.preco}</FormFeedback>\n                    </FormGroup>\n                  </Col>\n                  <Col md={4}>\n                    <FormGroup>\n                      {/* <Label for=\"unidade\">Unidade</Label> */}\n                      <CustomInput\n                        type=\"select\"\n                        id=\"unidade\"\n                        name=\"unidade\"\n                        value={unidade}\n                        onChange={({ target: { value } }) => setUnidade(value)}\n                      >\n                        <option value=\"\">Por</option>\n                        {unidades.map((c) => (\n                          <option key={c._id} value={c._id}>\n                            {c.name}\n                          </option>\n                        ))}\n                      </CustomInput>\n                    </FormGroup>\n                  </Col>\n                  <Col md={4}>\n                    <FormGroup>\n                      {/* <Label for=\"quantidade\">Quantidade</Label> */}\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Quantidade\"\n                        value={quantidade}\n                        invalid={!!validationErrors.quantidade}\n                        onChange={({ target: { value } }) => setQuantidade(value)}\n                      />\n                      <FormFeedback>{validationErrors.quantidade}</FormFeedback>\n                    </FormGroup>\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        {showButton && (\n        <Row>\n          <Col>\n            <Card>\n              <CardFooter>\n                <Row className=\"justify-content-between px-3\">\n                  <Button onClick={handlePrev}>Anterior</Button>\n                  <Button onClick={handleSubmit}>Salvar</Button>\n                </Row>\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n        )}\n      </Container>\n    </>\n  );\n}\n\nexport default AnuncioDetails;\n"],"sourceRoot":""}