{"version":3,"sources":["app/constants/auth.js","app/routes/index.js","App.js","serviceWorker.js","index.js","app/services/api.js","app/components/FullScreenLoader/index.js","app/contexts/app.js","app/components/Notification/index.js","app/hooks/auth.js"],"names":["TOKEN_KEY","ID_KEY","USER_NAME","Home","React","lazy","Anuncio","Login","LoginAdmin","Register","ForgetPassword","RecoverPassword","Depoimentos","Novilha","BoiGordo","MainRoutes","path","element","loading","className","style","zIndex","Spinner","type","App","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","api","axios","create","baseURL","interceptors","request","use","a","config","token","localStorage","getItem","id","Authorization","Loader","AppContext","createContext","AppProvider","children","useState","setLoading","navbarTogglerOpen","setNavbarTogglerOpen","value","useMemo","Provider","Notification","_props","ref","notification","useRef","useImperativeHandle","notify","place","title","message","color","icon","autoDismiss","closeButton","options","current","notificationAlert","forwardRef","AuthContext","useAuth","context","useContext","Error","AuthProvider","loggedUser","setLoggedUser","userToken","setUserToken","isAuthenticated","setIsAuthenticated","notificationRef","useEffect","data","signIn","user","setItem","_id","fullName","signOut","delete","removeItem"],"mappings":"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","file":"static/js/main.e7f9939f.chunk.js","sourcesContent":["export const TOKEN_KEY = '@token';\nexport const ID_KEY = '@idkey';\nexport const USER_NAME = '@username';\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\n// Pages\nconst Home = React.lazy(() => import('../pages/Home'));\nconst Anuncio = React.lazy(() => import('../pages/Anuncio'));\nconst Login = React.lazy(() => import('../pages/Login'));\nconst LoginAdmin = React.lazy(() => import('../pages/LoginAdmin'));\nconst Register = React.lazy(() => import('../pages/Register'));\nconst ForgetPassword = React.lazy(() => import('../pages/ForgetPassword'));\nconst RecoverPassword = React.lazy(() => import('../pages/RecoverPassword'));\nconst Depoimentos = React.lazy(() => import('../pages/Depoimentos'));\nconst Novilha = React.lazy(() => import('../pages/Novilha'));\nconst BoiGordo = React.lazy(() => import('../pages/BoiGordo'));\n\nexport const MainRoutes = () => (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    <Route path=\"/:categoria\" element={<Home />} />\n    <Route path=\"/anuncio/:id\" element={<Anuncio />} />\n    <Route path=\"/login\" element={<Login />} />\n    <Route path=\"/login-admin\" element={<LoginAdmin />} />\n    <Route path=\"/cadastro\" element={<Register />} />\n    <Route path=\"/esquecisenha\" element={<ForgetPassword />} />\n    <Route path=\"/depoimentos\" element={<Depoimentos />} />\n    <Route path=\"/cotacao-novilha\" element={<Novilha />} />\n    <Route path=\"/cotacao-boigordo\" element={<BoiGordo />} />\n    <Route path=\"/alterarsenha/:token\" element={<RecoverPassword />} />\n    <Route path=\"*\" element={<Home />} />\n  </Routes>\n);\n\nexport default MainRoutes;\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Spinner } from 'reactstrap';\n\nimport Routes from './app/routes';\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport 'react-notification-alert/dist/animate.css';\nimport './app/assets/vendor/fontawesome-free-5.15.2-web/css/all.min.css';\nimport './app/assets/css/bootstrap.css';\nimport './app/assets/css/custom.css';\n\nconst loading = (\n  <div\n    className=\"bg-primary opacity-7 d-flex w-100 vh-100 align-items-center justify-content-center position-fixed left-0 top-0\"\n    style={{ zIndex: 999999 }}\n  >\n    <Spinner type=\"grow\" />\n  </div>\n);\n\nconst App = () => (\n  <Router>\n    <Suspense fallback={loading}>\n      <Routes />\n    </Suspense>\n  </Router>\n);\n\nexport default App;\n","/* eslint-disable no-unused-vars */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register() {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    // console.log('new PUBLIC_URL', publicUrl);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      // console.log('service-worker url', swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n\n  /* if ('serviceWorker' in navigator) {\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n    console.log(swUrl);\n\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n          // Registration was successful\n          console.log(\n            'ServiceWorker registration successful with scope: ',\n            registration.scope,\n          );\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch((err) => {\n          // registration failed :(\n          // console.log('ServiceWorker registration failed: ', err);\n        });\n    });\n  } */\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport AppProvider from './app/contexts/app';\nimport AuthProvider from './app/hooks/auth';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppProvider>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </AppProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n","/* eslint-disable no-param-reassign */\nimport axios from 'axios';\n\nimport { TOKEN_KEY, ID_KEY } from '../constants/auth';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n});\n\napi.interceptors.request.use(async (config) => {\n  const token = localStorage.getItem(TOKEN_KEY);\n  const id = localStorage.getItem(ID_KEY);\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    config.headers.id = id;\n  }\n  return config;\n});\n\nexport default api;\n","import React from 'react';\nimport { Spinner } from 'reactstrap';\n\nfunction Loader({ loading }) {\n  if (loading) {\n    return (\n      <div\n        className=\"bg-primary opacity-7 d-flex w-100 vh-100 align-items-center justify-content-center position-fixed left-0 top-0\"\n        style={{ zIndex: 999999 }}\n      >\n        <Spinner type=\"grow\" />\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport default Loader;\n","import React, {\n  useState,\n  createContext,\n  useMemo,\n} from 'react';\n\nimport Loader from '../components/FullScreenLoader';\n\nexport const AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(false);\n  const [navbarTogglerOpen, setNavbarTogglerOpen] = useState(true);\n\n  const value = useMemo(\n    () => ({\n      navbarTogglerOpen,\n      setNavbarTogglerOpen,\n      loading,\n      setLoading,\n    }),\n    [navbarTogglerOpen, loading],\n  );\n\n  return (\n    <AppContext.Provider value={value}>\n      <Loader loading={loading} />\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;\n","import React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport NotificationAlert from 'react-notification-alert';\n\nfunction Notification(_props, ref) {\n  const notification = useRef();\n\n  useImperativeHandle(ref, () => ({\n    notify: ({ place, title, message, color, icon, autoDismiss, closeButton }) => {\n      const options = {\n        place: place || 'tr',\n        message: (\n          <div className=\"d-flex flex-column alert-text\">\n            <span className=\"alert-title\">{title || 'Mensagem'}</span>\n            <span>{message}</span>\n          </div>\n        ),\n        type: color || 'success',\n        icon: icon || '',\n        autoDismiss: autoDismiss || 5,\n        closeButton,\n      };\n      notification.current.notificationAlert(options);\n    },\n  }));\n\n  return <NotificationAlert ref={notification} />;\n}\n\nexport default forwardRef(Notification);\n","import React, {\n  useState,\n  useEffect,\n  useRef,\n  createContext,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport Notification from '../components/Notification';\nimport { ID_KEY, TOKEN_KEY, USER_NAME } from '../constants/auth';\nimport api from '../services/api';\n\nconst AuthContext = createContext();\n\nconst AuthProvider = ({ children }) => {\n  const [loggedUser, setLoggedUser] = useState({});\n  const [userToken, setUserToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const notificationRef = useRef();\n\n  useEffect(() => {\n    if (!userToken) {\n      setIsAuthenticated(false);\n      return;\n    }\n\n    (async () => {\n      try {\n        const { data } = await api.get('/profiles');\n        if (data) {\n          setIsAuthenticated(true);\n        }\n        setLoggedUser(data);\n      } catch (error) {\n        console.log(error);\n        setIsAuthenticated(false);\n        if (typeof error === 'string') {\n          notificationRef.current.notify({\n            message: error,\n            color: 'danger',\n          });\n          return;\n        }\n\n        if (error && error.response) {\n          const { message } = error.response.data;\n          if (message) {\n            notificationRef.current.notify({\n              message,\n              color: 'danger',\n            });\n          }\n        }\n      }\n    })();\n  }, [userToken]);\n\n  const value = useMemo(\n    () => ({\n      isAuthenticated,\n      loggedUser,\n      signIn: (token, user) => {\n        localStorage.setItem(TOKEN_KEY, token);\n        localStorage.setItem(ID_KEY, user.id || user._id);\n        localStorage.setItem(USER_NAME, user.fullName);\n        setUserToken(token);\n      },\n      signOut: async () => {\n        await api.delete(`/tokens/${userToken}`);\n        localStorage.removeItem(TOKEN_KEY);\n        localStorage.removeItem(ID_KEY);\n        localStorage.removeItem(USER_NAME);\n        setUserToken(null);\n      },\n    }),\n    [userToken, isAuthenticated, loggedUser],\n  );\n\n  useEffect(() => {\n    setUserToken(localStorage.getItem(TOKEN_KEY));\n  }, []);\n\n  return (\n    <AuthContext.Provider value={value}>\n      <Notification ref={notificationRef} />\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within a AuthProvider');\n  }\n\n  return context;\n};\n\nexport default AuthProvider;\n"],"sourceRoot":""}