{"version":3,"sources":["app/pages/Login/index.js"],"names":["Login","signIn","useAuth","notificationRef","useRef","useState","validationErrors","setValidationErrors","email","setEmail","password","setPassword","ref","className","xs","sm","md","lg","type","placeholder","value","invalid","onChange","target","addonType","color","onClick","a","data","schema","Yup","shape","required","validate","abortEarly","api","post","res","token","user","current","notify","message","setTimeout","console","log","ve","inner","forEach","e","path","response"],"mappings":"gWAkKeA,UA3ID,WAAO,IACXC,EAAWC,cAAXD,OACFE,EAAkBC,mBAFN,EAG8BC,mBAAS,IAHvC,mBAGXC,EAHW,KAGOC,EAHP,OAIQF,mBAAS,IAJjB,mBAIXG,EAJW,KAIJC,EAJI,OAKcJ,mBAAS,IALvB,mBAKXK,EALW,KAKDC,EALC,KAwElB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAcC,IAAKT,IACnB,cAAC,IAAD,CAAKU,UAAU,yDAAf,SACE,cAAC,IAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAA/B,SACE,cAAC,IAAD,CAAMJ,UAAU,MAAhB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,uCACA,cAAC,IAAD,UACE,eAAC,IAAD,CACEA,UAAS,4BAAuBP,EAAiBE,MAAQ,UAAY,IADvE,UAGE,cAAC,IAAD,CACEU,KAAK,OACLC,YAAY,QACZC,MAAOZ,EACPa,UAAWf,EAAiBE,MAC5Bc,SAAU,gBAAaF,EAAb,EAAGG,OAAUH,MAAb,OAA2BX,EAASW,MAEhD,cAAC,IAAD,CAAiBI,UAAU,SAA3B,SACE,cAAC,IAAD,UACE,mBAAGX,UAAU,oBAGjB,cAAC,IAAD,UAAeP,EAAiBE,aAGpC,cAAC,IAAD,UACE,eAAC,IAAD,CAAYK,UAAS,4BAAuBP,EAAiBI,SAAW,UAAY,IAApF,UACE,cAAC,IAAD,CACEQ,KAAK,WACLC,YAAY,QACZC,MAAOV,EACPW,UAAWf,EAAiBI,SAC5BY,SAAU,gBAAaF,EAAb,EAAGG,OAAUH,MAAb,OAA2BT,EAAYS,MAEnD,cAAC,IAAD,CAAiBI,UAAU,SAA3B,SACE,cAAC,IAAD,UACE,mBAAGX,UAAU,yBAGjB,cAAC,IAAD,UACGP,EAAiBI,gBAIxB,cAAC,IAAD,UACE,cAAC,IAAD,CAAKI,GAAG,IAAR,SACE,cAAC,IAAD,CACEW,MAAM,UACNZ,UAAU,OACVa,QArHC,WACnB,sBAAC,0CAAAC,EAAA,sEAESC,EAAO,CACXpB,QACAE,YAGImB,EAASC,MAAaC,MAAM,CAChCvB,MAAOsB,MACJtB,MAAM,sBACNwB,SAAS,oBACZtB,SAAUoB,MAAaE,SAAS,uBAXrC,SAcSH,EAAOI,SAASL,EAAM,CAC1BM,YAAY,IAfjB,uBAmBqBC,IAAIC,KAAK,uBAAwBR,GAnBtD,OAmBSS,EAnBT,SAoB2BA,EAAIT,KAApBU,EApBX,EAoBWA,MAAOC,EApBlB,EAoBkBA,KAEfpC,EAAgBqC,QAAQC,OAAO,CAC7BC,QAAS,gCAGXC,YAAW,WACT1C,EAAOqC,EAAOC,KACb,KA5BN,qDA8BGK,QAAQC,IAAR,MACAtC,EAAoB,MAEhB,gBAAeuB,KAjCtB,wBAkCK3B,EAAgBqC,QAAQC,OAAO,CAC7BC,QAAS,2BACTjB,MAAO,YAEHqB,EAAK,GACX,KAAIC,MAAMC,SAAQ,SAACC,GACjBH,EAAGG,EAAEC,MAAQD,EAAEP,WAEjBnC,EAAoBuC,GA1CzB,gCA8CO,MAAO,KAAIK,UAAY,KAAIA,SAASvB,MA9C3C,wBA+Cac,EAAY,KAAIS,SAASvB,KAAzBc,QACRvC,EAAgBqC,QAAQC,OAAO,CAC7BC,UACAjB,MAAO,WAlDd,2BAwDGtB,EAAgBqC,QAAQC,OAAO,CAC7BC,QAAS,0BACTjB,MAAO,WA1DZ,yDAAD,IAiHgB","file":"static/js/16.4448815a.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Container,\n  Col,\n  Row,\n  Form,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  FormFeedback,\n} from 'reactstrap';\n\nimport * as Yup from 'yup';\n\nimport Notification from '../../components/Notification';\nimport { useAuth } from '../../hooks/auth';\nimport api from '../../services/api';\n\nconst Login = () => {\n  const { signIn } = useAuth();\n  const notificationRef = useRef();\n  const [validationErrors, setValidationErrors] = useState({});\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = () => {\n    (async () => {\n      try {\n        const data = {\n          email,\n          password,\n        };\n\n        const schema = Yup.object().shape({\n          email: Yup.string()\n            .email('E-mail inválido')\n            .required('Informe um email'),\n          password: Yup.string().required('Informe uma senha'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        // validation passed\n        const res = await api.post('/admins/authenticate', data);\n        const { token, user } = res.data;\n\n        notificationRef.current.notify({\n          message: 'Login realizado com sucesso',\n        });\n\n        setTimeout(() => {\n          signIn(token, user);\n        }, 2000);\n      } catch (err) {\n        console.log(err);\n        setValidationErrors({});\n        // Validation failed\n        if (err instanceof Yup.ValidationError) {\n          notificationRef.current.notify({\n            message: 'Falha na Validação',\n            color: 'warning',\n          });\n          const ve = {};\n          err.inner.forEach((e) => {\n            ve[e.path] = e.message;\n          });\n          setValidationErrors(ve);\n          return;\n        }\n\n        if (err && err.response && err.response.data) {\n          const { message } = err.response.data;\n          notificationRef.current.notify({\n            message,\n            color: 'danger',\n          });\n\n          return;\n        }\n\n        notificationRef.current.notify({\n          message: 'Falha ao realizar Login',\n          color: 'danger',\n        });\n      }\n    })();\n  };\n\n  return (\n    <Container>\n      <Notification ref={notificationRef} />\n      <Row className=\"justify-content-center align-items-center w-100 vh-100\">\n        <Col xs=\"12\" sm=\"10\" md=\"6\" lg=\"5\">\n          <Card className=\"p-4\">\n            <CardBody>\n              <Form>\n                <h1>Login</h1>\n                <FormGroup>\n                  <InputGroup\n                    className={`input-group-merge ${validationErrors.email ? 'invalid' : ''}`}\n                  >\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Email\"\n                      value={email}\n                      invalid={!!validationErrors.email}\n                      onChange={({ target: { value } }) => setEmail(value)}\n                    />\n                    <InputGroupAddon addonType=\"append\">\n                      <InputGroupText>\n                        <i className=\"fas fa-user\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <FormFeedback>{validationErrors.email}</FormFeedback>\n                  </InputGroup>\n                </FormGroup>\n                <FormGroup>\n                  <InputGroup className={`input-group-merge ${validationErrors.password ? 'invalid' : ''}`}>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"Senha\"\n                      value={password}\n                      invalid={!!validationErrors.password}\n                      onChange={({ target: { value } }) => setPassword(value)}\n                    />\n                    <InputGroupAddon addonType=\"append\">\n                      <InputGroupText>\n                        <i className=\"fas fa-eye-slash\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <FormFeedback>\n                      {validationErrors.password}\n                    </FormFeedback>\n                  </InputGroup>\n                </FormGroup>\n                <Row>\n                  <Col xs=\"6\">\n                    <Button\n                      color=\"primary\"\n                      className=\"px-4\"\n                      onClick={handleSubmit}\n                    >\n                      Login\n                    </Button>\n                  </Col>\n                </Row>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}